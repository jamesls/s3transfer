#!/usr/bin/env python
import os
import time
import sys
import logging
import threading
import traceback
from botocore.session import get_session
from s3transfer.manager import TransferManager


_TRACER_THREAD = None


LOG_FORMAT = (
    '%(asctime)s - %(threadName)s - %(name)s - %(levelname)s - %(message)s')
logging.basicConfig(filename='/tmp/s3ctrlc-log', filemode='w',
                    format=LOG_FORMAT, level=logging.DEBUG)
log = logging.getLogger(__name__)
DIRECTORY = '/tmp/stress'


class TraceDumper(threading.Thread):
    """Dump stack traces into a given file periodically."""

    def __init__(self, filename, interval, auto):
        threading.Thread.__init__(self)
        self.auto = auto
        self.interval = interval
        self.filename = os.path.abspath(filename)
        self.stop_requested = threading.Event()

    def run(self):
        while not self.stop_requested.isSet():
            time.sleep(self.interval)
            if self.auto or not os.path.isfile(self.filename):
                self.stacktraces()

    def stop(self):
        self.stop_requested.set()
        self.join()
        if os.path.isfile(self.filename):
            os.unlink(self.filename)

    def stacktraces(self):
        with open(self.filename, 'wb') as f:
            f.write(self._get_stacktraces())

    def _get_stacktraces(self):
        code = []
        for threadId, stack in sys._current_frames().items():
            code.append("\n# ThreadID: %s" % threadId)
            for filename, lineno, name, line in traceback.extract_stack(stack):
                code.append('File: "%s", line %d, in %s' %
                            (filename, lineno, name))
                if line:
                    code.append("  %s" % (line.strip()))

        return '\n'.join(code)


def trace_start(filename, interval=5, auto=True):
    global _TRACER_THREAD
    _TRACER_THREAD = TraceDumper(filename, interval, auto)
    _TRACER_THREAD.setDaemon(True)
    _TRACER_THREAD.start()


def trace_stop():
    _TRACER_THREAD.stop()


def main():
    bucket = sys.argv[1]
    session = get_session()
    client = session.create_client('s3')
    trace_start('/tmp/threads.dump')
    try:
        with TransferManager(client) as manager:
            for root, dirnames, filenames in os.walk(DIRECTORY):
                for name in filenames:
                    localpath = os.path.join(root, name)
                    s3path = localpath[len(DIRECTORY)+1:]
                    manager.upload(localpath, bucket, s3path)
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    main()
